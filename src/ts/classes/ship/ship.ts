import { Character } from '../humanoid/character';
import { Part } from './part';

const characters ='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';

/**
 * Returns a randomly generated string, recommended length is 50. Good for generating ID's.
 * @param length number
 * @returns string
 */
export function generateString(length: number): string {
    let result: string = "";
    const charactersLength = characters.length;
    for ( let i = 0; i < length; i++ ) {
        result += characters.charAt(Math.floor(Math.random() * charactersLength));
    }

    return result;
}

/**
 * A ship, consisting of parts and crew making sure it stays afloat.
 */
export class Ship {
    public readonly name: string = "MasterShip 10000"
    public readonly parts: Part[] = [];
    public readonly crew: Character[] = [];
    public readonly id: string = "";

    constructor(name: string, parts: Part[], crew: Character[], id?: string | undefined) {
        if (id == "" || id == undefined) {
            id = generateString(15);
        }
        this.name = name;
        this.id = id;
        this.parts = parts;
        this.crew = crew;
    }

    /**
     * Add's a part to the Ship's part list
     * @param part 
     */
    public addPart(part: Part) {
        this.parts.push(part);
    }

    /**
     * Returns a part by it's defined ID
     * @param id 
     * @returns Part | undefined | null
     */
    public getPartById(id: string): Part | undefined | null {
        return this.parts.find(part => part.id == id);
    }

    /**
     * Returns a crewmember by it's name
     * @param name 
     * @returns Character | undefined | null
     */
    public getCrewByName(name: string): Character | undefined | null {
        return this.crew.find(member => member.name == name);
    }

    /**
     * Returns the totalHull in an array or a string if you want it verbose
     * @param verbose boolean
     * @returns number[] | string
     * @example
     * let part: Part = new Part("foo", "bar", 20, 20, 10);
     * let ship: Ship = new Ship([part],[]);
     * // returns [20, 10, 30]
     * // hull, shield, total
     * console.log(ship.totalHull())
     */
    public totalHull(this: Ship, verbose: boolean = false): number[] | string {
        let hp = 0;
        let shield = 0;
        this.parts.forEach(part => {
            hp += part.hull;
            shield += part.shieldHp;
        });
        let total = hp + shield;
        if (verbose) {
            return `${hp} hull + ${shield} shield = ${total} total`
        }
        return [hp, shield, total];
    }

    /**
     * Updates the initial UI generated by `ui()`
     */
    public updateUi() {
        const crewLabel: HTMLParagraphElement = <HTMLParagraphElement>document.getElementById(`${this.id}-crewlabel`);
        crewLabel.textContent = `You have ${this.crew.length} crewmembers above this ship.`

        const crew: HTMLDivElement = <HTMLDivElement>document.getElementById(`${this.id}-crew`);
        crew.innerHTML = "";

        this.crew.forEach(member => {
            crew.appendChild(member.ui());
        });

        console.log("updated UI done")
    }

    /**
     * Generate the initial UI
     * @returns Node
     */
    public ui(): Node {
        const div = document.createElement("div");
        div.id = this.id;
        div.classList.add("item");
        div.style.maxWidth = "650px";
        div.style.minWidth = "300px";
        div.style.maxHeight = "310px";

        const header = document.createElement("h2");
        header.textContent = this.name;
        div.appendChild(header);

        const id = document.createElement("em");
        id.textContent = "ID: " + this.id;
        div.appendChild(id);

        div.appendChild(document.createElement("br"));

        const crewLabel = document.createElement("p");
        crewLabel.textContent = `You have ${this.crew.length} crewmembers above this ship.`
        crewLabel.id = `${this.id}-crewlabel`
        div.appendChild(crewLabel);

        const crew = document.createElement("div");
        crew.classList.add("items");
        crew.id = `${this.id}-crew`
        div.appendChild(crew);

        this.crew.forEach(member => {
            crew.appendChild(member.ui());
        });

        return div;
    }
}